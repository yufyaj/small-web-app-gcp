name: Build, Push and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'Dockerfile'
      - 'start.sh'
      - '.github/workflows/build-push.yml'
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境 (dev/staging/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  determine-environments:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
    steps:
      - id: set-environments
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            # 手動実行時は選択された環境のみ
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
          else
            # mainブランチへのプッシュ時はdev環境のみ
            echo "environments=[\"dev\"]" >> $GITHUB_OUTPUT
          fi

  build-push-deploy:
    needs: determine-environments
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.determine-environments.outputs.environments) }}
    environment: ${{ matrix.environment == 'dev' && 'development' || matrix.environment }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # 最初にTerraform変数を抽出して、プロジェクトIDを取得
      - name: Extract Terraform Variables
        id: terraform-vars
        run: |
          cd infra/terraform/env/${{ matrix.environment }}
          # プロジェクトIDを取得
          PROJECT_ID=$(grep -oP 'project_id\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          
          # リージョンを取得
          REGION=$(grep -oP 'region\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "REGION=$REGION" >> $GITHUB_ENV
          
          # イメージタグの取得
          TF_IMAGE_TAG=$(grep -oP 'image_tag\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "IMAGE_TAG=$TF_IMAGE_TAG" >> $GITHUB_ENV
          
          # リポジトリIDを取得
          REPOSITORY=$(grep -oP 'repository_id\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          
          # イメージ名を取得
          IMAGE_NAME=$(grep -oP 'image_name\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: >-
            ${{ 
              matrix.environment == 'dev' && secrets.GCP_SA_KEY_DEV || 
              matrix.environment == 'staging' && secrets.GCP_SA_KEY_STAGING || 
              matrix.environment == 'production' && secrets.GCP_SA_KEY_PRODUCTION 
            }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Authenticate with Service Account
        run: |
          echo '${{ 
            matrix.environment == "dev" && secrets.GCP_SA_KEY_DEV || 
            matrix.environment == "staging" && secrets.GCP_SA_KEY_STAGING || 
            matrix.environment == "production" && secrets.GCP_SA_KEY_PRODUCTION 
          }}' > /tmp/sa-key.json
          gcloud auth activate-service-account --key-file=/tmp/sa-key.json

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --build-arg ENVIRONMENT=${{ matrix.environment }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.IMAGE_NAME }}-${{ matrix.environment }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="ENVIRONMENT=${{ matrix.environment }}"
          