name: Build, Push and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'nginx/**'
      - 'Dockerfile'
      - 'start.sh'
      - '.github/workflows/build-push.yml'
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境 (dev/staging/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
  # コミットSHAをデフォルトタグとして使用し、Terraformの設定も参照
  COMMIT_SHA: ${{ github.sha }}

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Extract Terraform Variables
        id: terraform-vars
        run: |
          cd infra/terraform/env/${{ env.ENVIRONMENT }}
          # リージョンを取得
          REGION=$(grep -oP 'region\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "REGION=$REGION" >> $GITHUB_ENV
          # プロジェクトIDを取得
          PROJECT_ID=$(grep -oP 'project_id\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          # イメージタグの取得
          TF_IMAGE_TAG=$(grep -oP 'image_tag\s*=\s*"\K[^"]+' terraform.tfvars)
          # Terraformのタグが "latest" の場合はコミットハッシュを使用
          if [ "$TF_IMAGE_TAG" = "latest" ]; then
            echo "IMAGE_TAG=${{ env.COMMIT_SHA }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=$TF_IMAGE_TAG" >> $GITHUB_ENV
          fi
          
          # リポジトリIDを取得
          REPOSITORY=$(grep -oP 'repository_id\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          
          # イメージ名を取得
          IMAGE_NAME=$(grep -oP 'image_name\s*=\s*"\K[^"]+' terraform.tfvars)
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build unified Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          # latestタグも設定
          docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest

      - name: Push unified Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          
      - name: Check tfvars file exists
        run: |
          if [ ! -f ./infra/terraform/env/${{ env.ENVIRONMENT }}/terraform.tfvars ]; then
            echo "Error: terraform.tfvars for environment ${{ env.ENVIRONMENT }} does not exist"
            exit 1
          fi
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          
      - name: Terraform Init
        working-directory: ./infra/terraform
        run: |
          terraform init -var-file="env/${{ env.ENVIRONMENT }}/terraform.tfvars"
        
      - name: Terraform Apply
        working-directory: ./infra/terraform
        run: |
          terraform apply -auto-approve \
            -var-file="env/${{ env.ENVIRONMENT }}/terraform.tfvars" \
            -var="image_tag=${{ env.IMAGE_TAG }}"